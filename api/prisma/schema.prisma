// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  phone         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relacionamentos
  accounts      Account[]
  sessions      Session[]
  properties    Property[]
  favorites     Favorite[]
  messages      Message[]
  notifications Notification[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  passwordHash      String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Property {
  id          String        @id @default(cuid())
  title       String
  description String
  price       Float
  type        PropertyType
  status      PropertyStatus @default(ACTIVE)
  bedrooms   Int?
  bathrooms   Int?
  area        Float?
  address     String
  city        String
  state       String
  zipCode     String?
  latitude    Float?
  longitude   Float?
  images      String        @default("[]") // JSON string para array
  features    String        @default("[]") // JSON string para array
  isPublished Boolean       @default(false)
  views       Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relacionamentos
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites   Favorite[]
  messages    Message[]

  @@map("properties")
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@map("favorites")
}

model Message {
  id         String   @id @default(cuid())
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relacionamentos
  userId     String
  propertyId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Notification {
  id        String             @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean            @default(false)
  createdAt DateTime           @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum UserRole {
  USER
  CORRETOR
  PROPRIETARIO
  INCORPORADORA
  ADMIN
}

enum PropertyType {
  CASA
  APARTAMENTO
  TERRENO
  COMERCIAL
  RURAL
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
  SOLD
  RENTED
  PENDING
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}